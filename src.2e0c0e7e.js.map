{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","timer","document","getElementById","daysSpan","querySelector","hoursSpan","minsSpan","secsSpan","CountdownTimer","targetDate","Date","getTime","intervalForTimer","updateTimer","currentTime","now","time","days","resalt","Math","floor","hours","pad","mins","secs","console","log","updateClockFace","setTimeout","textContent","value","String","padStart"],"mappings":";AA6DI,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCA7DJ,IAAMA,EAAO,CACTC,MAAOC,SAASC,eAAe,WAC/BC,SAAUF,SAASG,cAAc,uBACjCC,UAAWJ,SAASG,cAAc,wBAClCE,SAAUL,SAASG,cAAc,uBACjCG,SAAUN,SAASG,cAAc,wBAG/BI,EACF,SAA4B,EAAA,GAAdC,IAAAA,EAAAA,EAAAA,WAAc,EAAA,KAAA,GACnBA,KAAAA,WAAaA,GAIpBT,EAAQ,IAAIQ,EAAe,CAC7BC,WAAY,IAAIC,KAAK,cAAcC,QAAQ,gBAG3CC,EAAmB,KAIvB,SAASC,IAECC,IAAAA,EAAcJ,KAAKK,MAErBf,GADJgB,KAAOhB,EAAMS,WAAaK,EACtBd,EAAMS,aAAeK,EACd,MAAA,cAELG,IAIAC,EAAS,CAAED,KAJJE,KAAKC,MAAMJ,KAAQ,OAITK,MAHTC,EAAIH,KAAKC,MAAOJ,KAAQ,MAAyB,OAGjCO,KAFjBD,EAAIH,KAAKC,MAAOJ,KAAQ,KAAoB,MAErBQ,KADvBF,EAAIH,KAAKC,MAAOJ,KAAQ,IAAc,OAEnDS,QAAQC,IAAIR,GACZS,EAAgBT,GAEhBN,EAAmBgB,WAAWf,EAAa,KAE/C,SAASc,EAA2C,GAA1BV,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACzCzB,EAAKI,SAAS0B,YAAcZ,EAC5BlB,EAAKM,UAAUwB,YAAcR,EAC7BtB,EAAKO,SAASuB,YAAcN,EAC5BxB,EAAKQ,SAASsB,YAAcL,EAEhC,SAASF,EAAIQ,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KA1BrCnB;;ACpBA,aAAA,QAAA","file":"src.2e0c0e7e.js","sourceRoot":"../src","sourcesContent":["const refs = {\n    timer: document.getElementById('timer-1'),\n    daysSpan: document.querySelector('[data-value=\"days\"]'),\n    hoursSpan: document.querySelector('[data-value=\"hours\"]'),\n    minsSpan: document.querySelector('[data-value=\"mins\"]'),\n    secsSpan: document.querySelector('[data-value=\"secs\"]'),\n}\n\nclass CountdownTimer{\n    constructor({ targetDate }) {\n        this.targetDate = targetDate;\n     }\n};\n\nconst timer = new CountdownTimer({\n    targetDate: new Date('2021-05-12').getTime('2021-05-12')\n});\n\nlet intervalForTimer = null;\n\nupdateTimer();\n\nfunction updateTimer() {\n    \n    const currentTime = Date.now();\n    time = timer.targetDate - currentTime;\n    if (timer.targetDate === currentTime) {\n        return 'Время вышло'\n    }\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n    const resalt = { days, hours, mins, secs };\n    console.log(resalt);\n    updateClockFace(resalt)\n    \n    intervalForTimer = setTimeout(updateTimer, 1000);\n}\nfunction updateClockFace({days, hours, mins, secs}) {\n    refs.daysSpan.textContent = days;\n    refs.hoursSpan.textContent = hours;\n    refs.minsSpan.textContent = mins;\n    refs.secsSpan.textContent = secs\n}\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n};\n\n// function getTimeComponents(time) {\n//     const days = Math.floor(time / (1000 * 60 * 60 * 24));\n//     const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//     const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n//     const resalt = {days, hours, mins, secs}\n// };\n\n\n// if(time<=1000) {\n    // clearInterval(intervalForTimer);\n    //     return console.log('00:00:00:00');\n    // }\n","import './js/timer'"]}